local ScreenGui = Instance.new("ScreenGui")
local Frame = Instance.new("Frame")
local Title = Instance.new("TextLabel")
local UserBox = Instance.new("TextBox")
local FreezeButton = Instance.new("TextButton")
local AutoAcceptButton = Instance.new("TextButton")
local TargetPlayerButton = Instance.new("TextButton")
local NotificationFrame = Instance.new("Frame")
local NotificationText = Instance.new("TextLabel")
local UICorner = Instance.new("UICorner")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

-- Parent to CoreGui for Executors
ScreenGui.Parent = game:GetService("CoreGui")
ScreenGui.Name = "TradeTool"

-- Main Frame
Frame.Parent = ScreenGui
Frame.BackgroundColor3 = Color3.new(0, 0, 0)
Frame.BorderSizePixel = 0
Frame.Position = UDim2.new(0.5, -125, 0.5, -150)
Frame.Size = UDim2.new(0, 250, 0, 350)

-- Rounded Corners
UICorner.Parent = Frame
UICorner.CornerRadius = UDim.new(0, 10)

-- Gradient for Frame
local FrameGradient = Instance.new("UIGradient", Frame)
FrameGradient.Color = ColorSequence.new({
    ColorSequenceKeypoint.new(0, Color3.new(1, 0, 0)), -- Red
    ColorSequenceKeypoint.new(1, Color3.new(0.5, 0, 0)) -- Darker Red
})

-- Title
Title.Parent = Frame
Title.Text = "TRADE TOOL"
Title.Font = Enum.Font.GothamBold
Title.TextSize = 20
Title.TextColor3 = Color3.new(1, 1, 1) -- White
Title.BackgroundTransparency = 1
Title.Size = UDim2.new(1, 0, 0, 40)

-- User Input Box
UserBox.Parent = Frame
UserBox.PlaceholderText = "Enter Victim Username..."
UserBox.Font = Enum.Font.Gotham
UserBox.TextSize = 14
UserBox.TextColor3 = Color3.new(1, 1, 1)
UserBox.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2) -- Dark Gray
UserBox.Position = UDim2.new(0.1, 0, 0.2, 0)
UserBox.Size = UDim2.new(0.8, 0, 0, 30)
UICorner:Clone().Parent = UserBox

-- Buttons
local function createButton(parent, text, position)
    local button = Instance.new("TextButton")
    button.Parent = parent
    button.Text = text
    button.Font = Enum.Font.GothamBold
    button.TextSize = 14
    button.TextColor3 = Color3.new(1, 1, 1) -- White
    button.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2) -- Dark Gray
    button.Position = position
    button.Size = UDim2.new(0.8, 0, 0, 40)
    UICorner:Clone().Parent = button

    -- Gradient for Buttons
    local ButtonGradient = Instance.new("UIGradient", button)
    ButtonGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.new(1, 0, 0)), -- Red
        ColorSequenceKeypoint.new(1, Color3.new(0.5, 0, 0)) -- Darker Red
    })

    return button
end

FreezeButton = createButton(Frame, "Freeze Trade", UDim2.new(0.1, 0, 0.4, 0))
AutoAcceptButton = createButton(Frame, "Auto Accept", UDim2.new(0.1, 0, 0.6, 0))
TargetPlayerButton = createButton(Frame, "Target Player", UDim2.new(0.1, 0, 0.8, 0))

-- Notification Frame
NotificationFrame.Parent = ScreenGui
NotificationFrame.BackgroundColor3 = Color3.new(0.1, 0.1, 0.1) -- Dark Gray
NotificationFrame.Size = UDim2.new(0, 300, 0, 50)
NotificationFrame.Position = UDim2.new(0.5, 0, 0, -60) -- Initially off-screen
NotificationFrame.AnchorPoint = Vector2.new(0.5, 0)
NotificationFrame.Visible = false
UICorner:Clone().Parent = NotificationFrame

NotificationText.Parent = NotificationFrame
NotificationText.Text = ""
NotificationText.Font = Enum.Font.GothamBold
NotificationText.TextSize = 14
NotificationText.TextColor3 = Color3.new(1, 1, 1) -- White
NotificationText.BackgroundTransparency = 1
NotificationText.Size = UDim2.new(1, -20, 1, 0)
NotificationText.Position = UDim2.new(0, 10, 0, 0)
NotificationText.TextWrapped = true

-- Function to Show Notifications
local function showNotification(message)
    NotificationText.Text = message
    NotificationFrame.Visible = true

    local slideIn = TweenService:Create(NotificationFrame, TweenInfo.new(0.5, Enum.EasingStyle.Bounce, Enum.EasingDirection.Out), {
        Position = UDim2.new(0.5, 0, 0, 20)
    })
    slideIn:Play()
    slideIn.Completed:Wait()

    wait(2)

    local slideOut = TweenService:Create(NotificationFrame, TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.In), {
        Position = UDim2.new(0.5, 0, 0, -60)
    })
    slideOut:Play()
    slideOut.Completed:Wait()

    NotificationFrame.Visible = false
end

FreezeButton.MouseButton1Click:Connect(function()
    showNotification("Freeze Trade activated!")
end)

AutoAcceptButton.MouseButton1Click:Connect(function()
    showNotification("Auto Accept activated!")
end)

TargetPlayerButton.MouseButton1Click:Connect(function()
    local username = UserBox.Text
    if username and username ~= "" then
        showNotification("Targeting Player: " .. username)
    else
        showNotification("Please enter a username first.")
    end
end)

-- Draggable Frame (PC + Mobile)
local dragging = false
local dragStart = nil
local startPos = nil

Frame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = Frame.Position
    end
end)

Frame.InputChanged:Connect(function(input)
    if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
        local delta = input.Position - dragStart
        Frame.Position = UDim2.new(
            startPos.X.Scale,
            startPos.X.Offset + delta.X,
            startPos.Y.Scale,
            startPos.Y.Offset + delta.Y
        )
    end
end)

Frame.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = false
    end
end)
